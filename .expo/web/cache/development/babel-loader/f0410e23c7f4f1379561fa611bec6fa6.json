{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Start from \"./components/Start\";\nimport Chat from \"./components/Chat\";\nimport 'react-native-gesture-handler';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return _jsx(NavigationContainer, {\n        children: _jsxs(Stack.Navigator, {\n          initialRouteName: \"Start\",\n          children: [_jsx(Stack.Screen, {\n            name: \"Start\",\n            component: Start\n          }), _jsx(Stack.Screen, {\n            name: \"Chat\",\n            component: Chat\n          })]\n        })\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"names":["React","Component","Start","Chat","NavigationContainer","createStackNavigator","AsyncStorage","Stack","App"],"sources":["C:/Users/dani/Desktop/Toni/CF_course/chat_app-master/chat_app-master/App.js"],"sourcesContent":["import React, { Component } from 'react'; // importing react -> mandatory to built a react app\nimport Start from './components/Start'; //the Start.js file is being imported from the /components folder\nimport Chat from './components/Chat'; //the Chat.js file is being imported from the /components folder\nimport 'react-native-gesture-handler'; //Importing gesture-hadnler, a declarative API exposing platform native touch and gesture system to React Native.\nimport { NavigationContainer } from '@react-navigation/native'; //The NavigationContainer is responsible for managing the app state and linking your top-level navigator to the app environment.\nimport { createStackNavigator } from '@react-navigation/stack'; //Stack Navigator provides a way for the app to transition between screens where each new screen is placed on top of a stack.\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n\nconst Stack = createStackNavigator();\n\nexport default class App extends Component {\n  \nrender() { //render contains all parts which will be displayed to the user\n  return (\n    <NavigationContainer> \n      <Stack.Navigator\n        initialRouteName=\"Start\"  //starting page for the app\n      >\n        <Stack.Screen\n          name=\"Start\"  //the name should ideally be the same as the component name, in this case \"Start\"\n          component={Start} //the component is a part which will be displayed. In this case it is the Start.js content\n        />\n        <Stack.Screen\n          name=\"Chat\"\n          component={Chat}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n    );\n  }\n}"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP;AACA,OAAOC,IAAP;AACA,OAAO,8BAAP;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,OAAOC,YAAP,MAAyB,2CAAzB;;;AAGA,IAAMC,KAAK,GAAGF,oBAAoB,EAAlC;;IAEqBG,G;;;;;;;;;;;;;WAErB,kBAAS;MACP,OACE,KAAC,mBAAD;QAAA,UACE,MAAC,KAAD,CAAO,SAAP;UACE,gBAAgB,EAAC,OADnB;UAAA,WAGE,KAAC,KAAD,CAAO,MAAP;YACE,IAAI,EAAC,OADP;YAEE,SAAS,EAAEN;UAFb,EAHF,EAOE,KAAC,KAAD,CAAO,MAAP;YACE,IAAI,EAAC,MADP;YAEE,SAAS,EAAEC;UAFb,EAPF;QAAA;MADF,EADF;IAgBC;;;;EAnB8BF,S;;SAAZO,G"},"metadata":{},"sourceType":"module"}